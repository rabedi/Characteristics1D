{
baseName
_Solver1D_pfragment



# 1. Solve after main and secondary points are added. No solution for extremum or crossing points is done at this stage
do_posConfs_first_notAddPtSolve
1

# 2. Actual solution for adding new points for crossing or extremum are done
do_posConfs_AddPtSolve
1

# 3. After all solutions are done, yet, another time no new point is added and extremum / crossings are obtained
do_posConfs_second_notAddPtSolve
1

# prints primary points (e.g. in this case specific segment length from Zhu06, Grady) as individual files that compile results for different a
b_print_PrimaryPoints
1


# for mode 1 solution where extremum and crossings are calculated in a restart of the general solve, 
# often resolution of the underlying grid (delx) is not changing but a new solution is sought.
# If resolution is not going to change (often the case) --> use			b_recalculate_solutions = false
# else b_recalculate_solutions = true
b_recalculate_solutions
0

str_map
{
#	tsr_Xu_Needleman		tsr_Ortiz
(	tsrModel	,	tsr_Ortiz	)
#(	tsrModel	,	tsr_Xu_Needleman	)

# normalization_no: actual values of log(a)		is read
# normalization_2:  tauC = 0.5 is used log(a'), a' = a * 0.5,		is read
# normalization_G: normalization based on G, a' = a * G, log(a') is read; G = 0.5 for Ortiz, exp(1) for Xu-Needleman
( 	laNormT	,	normalization_no	)
#(	laNormT	,	normalization_2	)
#(	laNormT	,	normalization_G	)
}

# 0: do not read previous solutions, 1 reads restart files 
read_Results 
1

# write solution logs (e.g. every point added, the log file is written so that restart can happen)
write_Results
1

# in checking if points are the same either the coordinate of the points are used (recommended - equality_by_x = 1) or indexMain, indexSecondary are used (equality_by_x = 0)
equality_by_x 
1

# sample set of parameters for this solve
# log10(a)
paras1D
{
3.5
#-2,-1
#0.0
#-2.5
#-2.9
#-2.751
#0.301029995663981
#-2.0
#-1.096910013008056
#-0.698970004336019
#2.301029995663981
#2.0	3.2
}

# sample 
indices4paras1D
{
#160
135
#170 (-3 don't know if completed), 175 (-2.5) 180 (-2), 185 (-1.5), 190 (-1), 195 (-0.5), 100 (0), 105 (0.5), 110 (1), 115 (1.5), 120 (2), 125 (2.5), 130 (3), 135 (3.5), 140 (4)
100
#1100
#86
#8
#9
#12
#3	4
}


### instructions for what to solve for (min, max, crossing), values of crossings, etc.
posConfs2Solve
{

	# maximum energy dissipation at dilute level
	{
		isActive	1
		nameBase	etd_max_eneD_dilute_time
		pos_y		55
		isExtremum	1
		isMins	{ 	0	}
		# crossing_ys	{	0.0		}
	}

	# time final, relative  energy dissipation by real source term energy
	{
		isActive	1
		nameBase	etf_max_rel_eneD_real_src_ene_tF
		pos_y		60
		isExtremum	1
		isMins	{ 	0	}
		# crossing_ys	{	0.0		}
	}

	# time final, relative  energy dissipation by max source term energy
	{
		isActive	1
		nameBase	etf_max_rel_eneD_max_src_ene_tF
		pos_y		63
		isExtremum	1
		isMins	{ 	0	}
		# crossing_ys	{	0.0		}
	}
	
	# vs = 0, Drugan's criterion - my version at tFinal
	{
		isActive	1
		nameBase	uv_vsDruganFinal
		pos_y		66
		isExtremum	0
		# isMins	{ 	1	}
		crossing_ys	{	0.0		}
		# position(s) around which find the crossing (large value -> start from xMax [GOOD here], small value -> start from xMin, other value between xMin, xMax -> find the root closest to this
		x0s			{	1000.0	}
		tol_y 		1e6	# large value deactivates checking del_y because the crosser does not have a smooth derivative
	}

	# relus = 0, Solid back to original size
	{
		isActive	1
		nameBase	uv_relus0
		pos_y		69
		isExtremum	0
		# isMins	{ 	1	}
		crossing_ys	{	0.0		}
		# position(s) around which find the crossing (large value -> start from xMax [GOOD here], small value -> start from xMin, other value between xMin, xMax -> find the root closest to this
		x0s			{	1000.0	}
		tol_y 		1e6	# large value deactivates checking del_y because the crosser does not have a smooth derivative
	}
	
	# relus = -1, Solid effective nondimnesional strain = -1
	{
		isActive	1
		nameBase	uv_relusm1
		pos_y		72
		isExtremum	0
		# isMins	{ 	1	}
		crossing_ys	{	0.0		}
		# position(s) around which find the crossing (large value -> start from xMax [GOOD here], small value -> start from xMin, other value between xMin, xMax -> find the root closest to this
		x0s			{	1000.0	}
		tol_y 		1e6	# large value deactivates checking del_y because the crosser does not have a smooth derivative
	}

	# vs = 0, Drugan's criterion - original idea at tMax
	{
		isActive	1
		nameBase	uv_vsDruganMax
		pos_y		75
		isExtremum	0
		# isMins	{ 	1	}
		crossing_ys	{	0.0		}
		# position(s) around which find the crossing (large value -> start from xMax [GOOD here], small value -> start from xMin, other value between xMin, xMax -> find the root closest to this
		x0s			{	1000.0	}
		tol_y 		1e6	# large value deactivates checking del_y because the crosser does not have a smooth derivative
	}
}

}