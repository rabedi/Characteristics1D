## config for domain
infile

## config for IC/BC
infile

## config for TS and adaptivity
infile

#####################################################################################
#####################################################################################
# start										ICBC
infile_icbc

{
# 1 -> axt, u_i = a_i xt
load_number
#3
1

# load case 1: 0 - Dim < 1 - a_i factors

load_parameters
1
############1.0
#10.0
100.0
#0.1
#0.001

}

# end										ICBC
#####################################################################################
#####################################################################################


#####################################################################################
######################################################################################
# start										domain
infile_domain

{
subdomain_config_names
{
infile
}

#x_min
#-0.5

#subdomain_one_part_size
#{
#10
#}

bulk_elastic_map
	{
	1
		{
			rho	1.0
			
			nu_iso	0.0
			

			E_iso	1.0
		}	
	}



# In Zhou_2006_Molinari_Ramesh_Analysis of the brittle fragmentation of an expanding ring.pdf, section 2.3.1. 
# the ring problem is opened up and treated as a 1D problem with specific BC (eqs 11 & 12)
# v = vTheta + ax, a = vr/R 


# this one when on, turns on fracture on the end point of the periodic domain to avoid complications pertained to modeling fracture on this boundary
ring_open_turn_fracture_on_periodic_end
#1
0

# true	-> damping term / rho = Dvv * vTheta 
#			(physically correct, but for elastic response, vTheta = 0, and for fracture this is mostly zero, so damping for ring problem is a 2nd order effect with this set-up)
#		  false: not recommended (non-physical) -> damping / rho = Dvv * v
ring_opened1D_damping_on_full_vTheta
1


# true:			Kinetic energy is computed on vTheta = v - ax, and vr
#						kinetic energy of vr =  ring_opened1D_kinetic_energy_vr = rhoAverage * a^2 * L^2/8/PI^2 is added to any times kinetic energy
#						and kinetic energy of vTheta = v - ax is considered
ring_opened1D_kinetic_energy_on_full_vTheta
1

######################################
# start	space / spacetime post-process
# post-process space / spacetime data and print it (summary of energies) space solutions at certain time steps
#
do_space_spacetime_PP
1

# when source term is nonzero to get the solution at a point inside a segment (between interfaces) iterations are needed
# pointSolution_maxIter_4PP -> what is the maximum of iterations needed
# pointSolution_relTol4Conv_4PP -> relative tolerance between previous solution and current solution to claim convergence

pointSolution_maxIter_4PP
10
pointSolution_relTol4Conv_4PP
1e-4

#how often space solution is printed (timeIndex % numTimesStep == 0) 
# cases:
#	numTimesStep  > 0
#			e.g.	numTimesStep = 1 (all time steps printed)
#					numTimesStep = 10 (every time step is printed (step 0, 10, 20, ...)
#	numTimesStep = 0
#					only the last step is printed
#	numTimesStep < 0
#					the time sequence is divided into (-numTimesStep) segments
#			e.g.	numTimesStep_Print_4PP = -10, numTimes = 400 -> 
#						numTimesStep = 400/10 = 40, so everytime step is printed (with a total of 11 prints)

#### print detailed solution, including points within the bulk
numTimeStep_BulkInterfacePoints_Print_4PP
#1
-10
#-50
#-100

#### printing [Damage, delU] only between segments (not within bulks). This is used to compute fragment size
numTimeStep_Interface_DSU_Fragment_Print_4PP
#-200
#-20
#-100
-1000

# for spatial segments (interval between interfaces) how many segment(s) is/are used.
#			1 -> only the two end points at the side interfaces that already exist are used.
#			2 -> 2 segments -> 3 points, 2 already on the sides + 1 in the middle.
#			n -> n + 1 points are used with 2 already existing on the two sides

numSpatialSubsegments_BulkInterfacePoints_Print_4PP
#4
#5
10

useRepeatedSimpsonRuleForHigherOrders_4PP
1


###################################### IO of raw data
##################  space print (1 time, printing all space) -> repeated over time values

# IO type (none, ascii, binary)
io_type_InterfaceRawFinalSln_AllSpace_Print_4PP
ascii
io_type_InterfaceRawScalars_AllSpace_Print_4PP
none

# The number of time steps at which we write raw data (scalar values, final solutions). 
# This is different from numTimesStep_Print_4PP in that the former prints raw data, and latter prints processed data even for points inside the element
# = 0 -> inactive
# > 0 -> every this number of steps data is written
# < 0 -> -numTimesStep_Print_Raw_data_4PP time steps overall chosen (e.g. -20 total of 20 time steps are used)
numTimeStep_InterfaceRawFinalSlnScalars_AllSpace_Print_4PP
#-200
-10

##################  time print (1 space, printing all times) -> repeated over space values

# IO type (none, ascii, binary)
io_type_InterfaceRawFinalSln_AllTime_Print_4PP
ascii
io_type_InterfaceRawScalars_AllTime_Print_4PP
none

# this is similar to above, but this time data is printed for a fixed time value
numSpaceStep_InterfaceRawFinalSlnScalars_AllTime_Print_4PP
#1
-2
#-50
#-8

# end	space / spacetime post-process
######################################

##################
# start visualization data output (uniform grid for each subdomain that can be used for contour plots)

# direction of visualization, if < 0, these files will not be printed
# < 0 turns off this option
visualization_dir
#0
-1

# < 0, -number of interfaces - 1 (e.g. # segments) used in each subdomain for its outputs
# > 0, the step size for that given subdomain
visualization_numSpaceStep
-1024
#-1

# again < 0, absolute number of steps, > 0 step size
visualization_numTimeStep
-400
 
# end visualization data
##################


interface_fracture_map
	{
	1
#####################################################################################
# start										fracture flag 1
			{
			beta_traction	1.0

			beta_delU		1.0

			# interfacial_damage_off	interfacial_damage_on		interfacial_damage_mixed
			# damageOffOnMix		interfacial_damage_off
			# damageOffOnMix		interfacial_damage_mixed
			damageOffOnMix		interfacial_damage_on

			# contact_off				contact_on					contact_mixed	
			# contactOffOnMix	contact_mixed
			contactOffOnMix	contact_off

			# decides to do regularization in positivie separation for contact problems and negative (interpenetration) for fracture problems
			rel_dcont_or_dsep	0.001

			# independent input of regularization limits (not recommended)	
			#	rel_dcont	-0.01
			#	rel_dsep	0.01

			# reg_linear	reg_sqrt1	reg_sqrt2	
			sep2cont_regType	reg_sqrt1
			
			# slip_off					slip_on						slip_mixed
			slipOffOnMix	slip_off
			
			c0	0.8
			gen_strength	1.0
			tau	0.1
#			deltaC	1.0
#			deltaC	0.1
			deltaC	0.01
			has_in_situ	0
			# in_situ_stress	0
			# sn	2.5
			# c		2.0
		#####################################	k	0.3
			
			# effSs_Off	effSs_sqrt	effSs_mc	effSs_mct	effSs_mctc	effSs_HoekBrown	effSs_Rankin	effSs_Tresca	effSsCompressive	effSs_vm	effSs_vmm	effSs_DP	
			effType		effSs_sqrt
			Hpara0	10.0
			hfunT	AllixHExp
			pn	0
			pc	0
			factor_k	0.0
			kn	0.0
			kc	0.0
			srcZeroFldGtmxV	1
			mxV4SrcZero	1.0
			zeroTol4DamageEq1	0.0001
			fx_boundedBy1	1
			
			# RBH_VelDDot_none	RBH_VelDDot_vnp_only		RBH_VelDDot_vtabs_only		RBH_VelDDot_vnp_vtabs		RBH_VelDDot_vel_effective
			# rbhvDTT	RBH_VelDDot_none
			rbhvDTT	RBH_VelDDot_vnp_only
			
			dvnRatio	1.0
			dvtRatio	10.0
			
			# friction_constant	friction_slip_weakeningLinear	friction_slip_weakeningPower	
			frictionModel	friction_constant
			
			isIsoFrictionParameters		1
			
			damaged_slip_dt	0.05
			
			damaged_para0_epsSW	0.01
			
			damaged_para1_n	2.0
			
			damaged_kUpper_iso_2D_pos_y_dir_or_3D_angularMax	0.6
			damaged_kLower_iso_2D_pos_y_dir_or_3D_angularMax	0.3
			
			damaged_kUpper_2D_neg_y_dir_or_3D_angularMin		0.5
			damaged_kLower_2D_neg_y_dir_or_3D_angularMin		0.2
			
			theta4MaxValDeg		30.0
			
			# interfacial_damage_traction_zero	interfacial_damage_traction_TSR	interfacial_damage_traction_HF
			# damageTractionModel		interfacial_damage_traction_zero
			damageTractionModel		interfacial_damage_traction_TSR
			
			# tsr_Zero	tsr_Xu_Needleman	tsr_Ortiz		tsr_linear		tsr_bilinear		tsr_exponential		tsr_hyperbolic		tsr_concrete
			# tsrModel	tsr_Xu_Needleman
			tsrModel	tsr_Ortiz
			
		}	
# end										fracture flag 1
#####################################################################################
	}

# Turn on Dirichlet for non-ring problem

directionalBCTypeLeftSide
#Dirichlet
PeriodicOrBloch

directionalBCTypeRightSide
#Dirichlet
PeriodicOrBloch

}

# end										domain
#####################################################################################
#####################################################################################

#####################################################################################
#####################################################################################
# start										subdomain0
infile_subdomain0

{
bisrt
inhomogeneous

numRepeatSequence
1

xm
#0.0
-0.5

xM
0.5
#10.0

#num_bulk_one_seq
#1

inhomogeneousConfigName
infile
#none

default_bulk_flag
1

default_interface_flag
# no fracture
#0
1

}

# end										subdomain0
#####################################################################################
#####################################################################################

#####################################################################################
#####################################################################################
# begin					inhomogeneous_elastic_fracture_subdomain_0

infile_inhomogeneous_elastic_frac0
{


#### coarsening / refinement options for the mesh
# resolutionFactor 
#					== 0 or +/-1 nothing happens
#					>  1  -> number of segments is DECREASED by this factor (e.g. if resolutionFactor ==  10 and numSegments = 1000 -> numSegments becoms 100)
#					<  -1 -> number of segments is INCREASED by this factor (e.g. if resolutionFactor == -10 and numSegments = 1000 -> numSegments becoms 10000)
resolutionFactor
0
#10
#16
#32
#64
#128
#256
#512
#2


### in coarsening operations how to coarsen / "average" multiple values into one for C, rho, and damping
sso_elasticC
mean_harmonic

sso_elasticRho
mean_arithmetic

sso_elasticDamping
mean_arithmetic
#### fracture 
# undecided, sigmadelta_const, delta_const, sigma_const, G_const, nonconst
fit delta_const

### in coarsening operations how to coarsen / "average" multiple values into one for sigma, delta, and iniDamage
#change
sso_sigma
min

sso_delta
mean_arithmetic

sso_iniDamage
max
###



######## elastic 
# undecided, Crho_const, rho_const, C_const, c_const, Z_const, nonconst
#eit rho_const
eit Crho_const

baseName_WOExt_oihf_elastic1
inline
#../InhomogeneousFiles/Fake/v1_x0/file
#../InhomogeneousFiles/cl-2.5_np1025/initial_values
../InhomogeneousFiles/clz_np16385/initial_values
{
num_Vals_and_x_Provided
1

valsAtVertices
1

uniformGrid
1

#0, 1 clear; -1 -> it takes the value of 1 for periodic domains, 0 for non-periodic
containsRepeatingEndPeriodicVal
-1
#0

randVariableType
Triangle

{
	min	
	0.5
	max
	1.5
	mode
	1.00
}
}
endinline

# baseName_WOExt_oihf_elastic2
# InhomogeneousFiles/Fake/v1_x0/file



baseName_WOExt_oihf_fracture1
inline
#../InhomogeneousFiles/Fake/v1_x0/file
#../InhomogeneousFiles/cl-2.5_np1025/initial_values
#../InhomogeneousFiles/clz_np1025/initial_values
../InhomogeneousFiles/clz_np16385/initial_values
{
num_Vals_and_x_Provided
1

valsAtVertices
1

uniformGrid
1

#0, 1 clear; -1 -> it takes the value of 1 for periodic domains, 0 for non-periodic
containsRepeatingEndPeriodicVal
-1
#0

randVariableType
Triangle

{
	min	
	0.5
	max
	1.5
	mode
	1.0
}
}
endinline





# baseName_WOExt_oihf_fracture2
# inline
# ../InhomogeneousFiles/Fake/v1_x0/file

baseName_WOExt_oihf_fracture_iniDamage
none
#inline
#../InhomogeneousFiles/Fake/v1_x0/file
#{
#num_Vals_and_x_Provided
#0

#valsAtVertices
#1

#uniformGrid
#1


#0, 1 clear; -1 -> it takes the value of 1 for periodic domains, 0 for non-periodic
#containsRepeatingEndPeriodicVal
#-1
##0

#randVariableType
#Triangle

#{
#	min	
#	0.0
#	max
#	0.4
#	mode
#	0.2
#}
#}
#endinline





}

# end					inhomogeneous_elastic_fracture_subdomain_0
#####################################################################################
#####################################################################################


#####################################################################################
#####################################################################################
# start 								time step & adaptivity
infile_ts_adaptivity

{

# ###################################################
# Run termination conditions
# ###################################################
# final time
terminate_run_target_time
#1.0
2.000
#16.0
#0.8
#10.0
#200.0
#8.00
#0.7

# for mixed damage evolution, what is the damage limit in which the simulation stops (after the first point reaches there)
# > 0, not active
terminate_run_target_max_damage 
2.9999999999

# ###################################################
# Convergence check for time step n -> when to stop iterations
# ###################################################
# 	does not allow indefinite iterations, after reaching the number below one of the two things happen - 
within_step_iter_max_num_iter
#5
10
#4
#1

# refine_after_max_num_iter:
# true:
#				in between_steps_adaptivity_s sets			(proposed delT = current_delT * refine_after_max_num_iter_del_t_factor)
#						refine: if proposed delT is < uniform_del_t
#						terminate (a_terminate_run_prematurely) otherwise
#		false:	assumes convergence of iterations and goes to 
refine_after_max_num_iter
#1
0

# if refine_after_max_num_iter == true, how smaller the time step should get for nonconvergent solutions
refine_after_max_num_iter_del_t_factor
0.5

within_step_iter_del_s_tol
0.01

# default: del_s is nondimensional (w.r.t. cohesive strength), if want to make it dimensional, uncomment the lines below (or to deactivate is use nonActive or use < 0 tol above)
# notActive, Dimensional, nonDimensional
#del_s_type_within_step
#Dimensional


within_step_iter_del_v_tol
0.01

# default: del_s is nondimensional (w.r.t. cohesive velocity), if want to make it dimensional, uncomment the lines below (or to deactivate is use nonActive or use < 0 tol above)
# notActive, Dimensional, nonDimensional
#del_v_type_within_step
#Dimensional

# ###################################################
# Adaptivity step n -> n + 1
# ###################################################
# adaptivity is on or off
between_steps_adaptivity
0

# time step for non-adaptive runs and starting time step for adaptive ones
# < 0, relative to domain min_del_t -> CFL#
uniform_del_t
-1
#-0.1
#-0.01
#-1.0
#-0.128
#-0.0128
################-0.0128
#0.00000128
#-0.001

# minimum allowable time step, smaller than this the run terminates. We can get to such small sizes if successive refinements are needed
# < 0, relative to domain min_del_t
min_del_t
#-0.001
#-0.128
-0.00128

# in case of coarsening, time step is not allowed to be larger than this
# < 0, relative to domain min_del_t
max_del_t
-1

######### tolerances 	->  < 0  Inactive
# allowable change in stress between steps n and n+1 (relative to strength)
between_steps_del_s_tol
-0.1

# default: del_s is nondimensional (w.r.t. cohesive strength), if want to make it dimensional, uncomment the lines below (or to deactivate is use nonActive or use < 0 tol above)
# notActive, Dimensional, nonDimensional
#del_s_type
#Dimensional

# allowable change in velocity between steps n and n+1 (relative to strength)
between_steps_del_v_tol
-0.1

# default: del_v is nondimensional (w.r.t. cohesive velocity), if want to make it dimensional, uncomment the lines below (or to deactivate is use nonActive or use < 0 tol above)
# notActive, Dimensional, nonDimensional
#del_s_type
#Dimensional

# allowable change in damage between steps n and n+1
between_steps_del_damage_tol
-0.05

# allowable change in damage source * tauC between steps n and n+1 (times delT)
between_steps_damage_source_tau_tol
-0.01

#change of c from separation to contact from earlier to current step (contact to separation is not included as that one can be rapid)
between_steps_del_sep2cont_c
0.2

########## refine / coarsen ratios
# if error_ratio > coarsening_error_ratio_lim, timeStep *= coarsening_delt_factor
coarsening_error_ratio_lim
1.2

coarsening_delt_factor
2.0

# if error_ratio < refinement_error_ratio_lim, timeStep *= refinement_delt_factor
refinement_error_ratio_lim
0.8

refinement_delt_factor
0.5


# ###################################################
# print flags
# ###################################################
# print area fractions, etc.
print_Scalars
1

print_Adaptivity
0

# log of iteration convergence
print_outIterationConv
0

# ###################################################
# extrapolating earlier solution(s) to current step (for v, s, u, D, ...)
# ###################################################

# parameters that can be used in general time marching and computing values of step (n + 1) from step n and possibly earlier
# in general only one earlier step (i.e. n) is used to form values of step (n + 1)
# at initial time, etc. only 1 is used
max_num_earlier_steps
1


# consider when there is only one earlier value for the ODE
# fDot = source_f. At time step n + 1, with only one earlier value, we'll update f_n+1 as:
# -	iteration 0:	alpha = one_step_update_alpha_it0			f_n+1 = f_n + source_f(n) * alpha * del_t
#		that is, alpha = 0, simply uses earlier value
one_step_update_alpha_it0
1.0

# -	iteration > 0	alpha = one_step_update_alpha_it_gt0		f_n+1 = f_n + (source_f(n) * alpha + (1 - alpha) * source_f(n+1)) * del_t
one_step_update_alpha_it_gt0
0.5
}

# end 								time step & adaptivity
#####################################################################################
#####################################################################################
